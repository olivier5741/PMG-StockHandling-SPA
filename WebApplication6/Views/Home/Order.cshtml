
@{
    ViewBag.Title = "Command";
}

<h2>Commande</h2>

<div>
    <h2>Tous les produits de votre commande</h2>

    <ul data-bind="foreach: productsToOrder">
        <li>
            <span>
                <span data-bind="text: name"></span>
                (<span data-bind="text: previousQuantity"></span>)
            </span>
            <span>
                <input data-bind="value: quantity" type="number" name="quantity" min="0" max="100"/>
                (<span data-bind="text: (quantityDifference()<=0?'':'+') + quantityDifference()"></span>)
            </span>
            <select data-bind="options: $root.availableUnits, optionsText: 'unit', optionsValue: 'id', value: unit"></select>    
            <span data-bind="text: formattedProductPrice"></span>      
            <span data-bind="text: formattedCommandItemPrice"></span> 
            <a href="#" data-bind="click: $parent.resetOrderProduct">Reset</a>
        </li>
    </ul>

    <h3 data-bind="visible: totalCommandPrice() > 0">
        Total: <span data-bind="text: totalCommandPrice().toFixed(2)"></span> €
    </h3>

    <button data-bind="click: resetOrderProducts">Reset all</button>

</div>

<style type="text/css">
    ul li > span {
        width: 90px;
        display: inline-block;
    }

    ul li input {
        width: 50px;
    }

    ul li select {
        width: 80px;
    }

    ul li {
        margin-bottom: 5px;
    }
</style>

<script src="http://ajax.aspnetcdn.com/ajax/jQuery/jquery-2.0.3.min.js"></script>
<script src='http://cdnjs.cloudflare.com/ajax/libs/knockout/3.1.0/knockout-min.js'></script>

<script>

    function OrderProduct(name, quantity, unit, price) {
        var self = this;
        self.name = ko.observable(name);
        self.quantity = ko.observable(quantity);
        self.unit = ko.observable(unit);
        self.price = ko.observable(price);

        self.previousQuantity = ko.observable(quantity);

        self.quantityDifference = ko.computed(function () {
            return self.quantity() - self.previousQuantity();
        });

        self.formattedProductPrice = ko.computed(function() {
            return self.price() ? "à " + self.price().toFixed(2) + " €" : "";        
        });

        self.formattedCommandItemPrice = ko.computed(function () {
            return self.price() && self.quantity() > 0 ? (self.price()*self.quantity()).toFixed(2) + " €" : "";
        });
    }

    function OrderViewModel() {
        var self = this;

        self.availableUnits = [{ id: "1", unit: "boîte(s)", numberOfBaseUnits: 15 }, { id: "2", unit: "unité(s)", numberOfBaseUnits: 1 }]

        self.productsToOrder = ko.observableArray([
            new OrderProduct("Citron", 10, "1", 32.4),
            new OrderProduct("Orange", 27, "2", 44.1),
            new OrderProduct("Cerise", 8, "1", 53.2)
        ]);

        self.totalCommandPrice = ko.computed(function () {
            var total = 0;
            for (var i = 0; i < self.productsToOrder().length; i++)
                total += self.productsToOrder()[i].price() * self.productsToOrder()[i].quantity();
            return total;
        });

        self.resetOrderProduct = function(orderProduct) { orderProduct.quantity(orderProduct.previousQuantity()) }

        self.resetOrderProducts = function () {
            for (var i = 0; i < self.productsToOrder().length; i++)
                self.productsToOrder()[i].quantity(self.productsToOrder()[i].previousQuantity()) ;
        }
    }

    ko.applyBindings(new OrderViewModel);

</script>



